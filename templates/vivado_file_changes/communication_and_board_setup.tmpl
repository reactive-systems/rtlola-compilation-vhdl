#ifndef SRC_COM_AND_BOARD_SETUP_H_
#define SRC_COM_AND_BOARD_SETUP_H_
#include <stdio.h>

#include "xparameters.h"

#include "netif/xadapter.h"

#include "platform.h"
#include "platform_config.h"
#include "xil_printf.h"
#include "lwip/udp.h"
#include "xil_cache.h"

#include "udp_communication.h"

struct ip_addr ipaddr, netmask, gw; /* IP settings */

static struct netif server_netif;	/* network interface for board in general */
struct netif *udp_netif; 			/* network interface for UDP*/

struct udp_pcb *pcb;
unsigned port = 12000;

/* the mac address of the board */
unsigned char mac_ethernet_address[] = { 0x00, 0x0a, 0x35, 0x00, 0x01, 0x02 };

/* missing declaration in lwIP */
void lwip_init();

int write_ip(FIL* fil, char *buff, char *msg, struct ip_addr *ip) {
	sprintf(buff, "%s %d.%d.%d.%d\n\r", msg, ip4_addr1(ip), ip4_addr2(ip), ip4_addr3(ip), ip4_addr4(ip));
	frw = f_write(fil, buff, strlen(buff), &bw);
	frs = f_sync(fil);
	if (frw || frs) {
		xil_printf("ERROR: could not write, when receiving a event!\n\r");
		return 1;
	}
	return 0;
}

int write_ip_settings(FIL* fil, char* buff, struct ip_addr *ip, struct ip_addr *mask, struct ip_addr *gw) {
	int ret1 = write_ip(fil, buff, "Board IP: ", ip);
	int ret2 = write_ip(fil, buff, "Netmask : ", mask);
	int ret3 = write_ip(fil, buff, "Gateway : ", gw);
	return ret1 + ret2 + ret3;
}

void print_ip(char *msg, struct ip_addr *ip) {
	print(msg);
	xil_printf("%d.%d.%d.%d\n\r", ip4_addr1(ip), ip4_addr2(ip), ip4_addr3(ip), ip4_addr4(ip));
}

void print_ip_settings(struct ip_addr *ip, struct ip_addr *mask, struct ip_addr *gw) {
	print_ip("Board IP: ", ip);
	print_ip("Netmask : ", mask);
	print_ip("Gateway : ", gw);
}

void initialize_ip_address() {
	IP4_ADDR(&ipaddr,  192, 168,   2, 2);
	IP4_ADDR(&netmask, 255, 255, 255,  0);
	IP4_ADDR(&gw,      192, 168,   1,  1);
}

void print_app_header() {
	xil_printf("\n\r\n\r-----RTLola Monitoring with UDP communication ------\n\r");
	xil_printf("UDP packets sent to port %u will be received parsed and given to \n\r the monitor on the FPGA\n\r", port);
}

int start_udp_communication() {
	err_t err;

	/* create new UDP PCB structure */
	pcb = udp_new();
	if (!pcb) {
		xil_printf("Error creating PCB. Out of Memory\n\r");
		return -1;
	}

	/* bind to specified @port */
	err = udp_bind(pcb, IP_ADDR_ANY, port);
	if (err != ERR_OK) {
		xil_printf("Unable to bind to port %d: err = %d\n\r", port, err);
		return -2;
	}

	/* specify callback to use for incoming connections */
	udp_recv(pcb, udp_rec, NULL);

	xil_printf("UDP echo server started @ port %d\n\r", port);

	/* open file object */
	f_mount(&fatFs, "", 0);
	frc = f_open(&fil, "output.txt", FA_WRITE | FA_CREATE_ALWAYS);
	if (frc) {
		xil_printf("ERROR: could not open the file!\n\r");
		return (int) frc;
	}
    //char buff[500];
    //get_file_header(buff);
	//frw = f_write(&fil, buff, strlen(buff), &bw);
    //frs = f_sync(&fil);
    //if (frw || frs) {
    //    xil_printf("ERROR: could not write, when writing header!\n\r");
    //}
	return 0;
}

int setup() {

	udp_netif = &server_netif;
	/* Define this board specific macro in order perform PHY reset on ZCU102 */
	init_platform();

	initialize_ip_address();

	print_app_header();

	lwip_init();

	/* Add network interface to the netif_list, and set it as default */
	if (!xemac_add(udp_netif, &ipaddr, &netmask, &gw, mac_ethernet_address, PLATFORM_EMAC_BASEADDR)) {
		xil_printf("ERROR: adding N/W interface\n\r");
		return -1;
	}
	netif_set_default(udp_netif);

	/* now enable interrupts */
	platform_enable_interrupts();

	/* specify that the network if is up */
	netif_set_up(udp_netif);

	print_ip_settings(&ipaddr, &netmask, &gw);

	/* start monitor */
	int res_monitor_start = set_up_monitor();
	if (res_monitor_start != 0) {
		xil_printf("ERROR: start monitor invalid!\n\r");
		return res_monitor_start;
	}

	/* start UDP communication */
	int res_udp_start = start_udp_communication();
	if (res_udp_start != 0) {
		xil_printf("ERROR: start application invalid!\n\r");
		return res_udp_start;
	}

	/*write config file */
	char buff[500];
	FIL conf_fil;
	frc = f_open(&conf_fil, "conf.txt", FA_WRITE | FA_CREATE_ALWAYS);
	if (frc) {
		xil_printf("ERROR: could not open the file!\n\r");
		return (int) frc;
	}
	int res_write = write_ip_settings(&conf_fil,buff, &ipaddr, &netmask, &gw);
	if (res_write != 0) {
		xil_printf("ERROR: write config file failed!\n\r");
		return res_write;
	}
	frc = f_close(&conf_fil);
	if (frc) {
		xil_printf("ERROR: could not close the file!\n\r");
		return (int) frc;
	}

	return 0;

}

#endif
